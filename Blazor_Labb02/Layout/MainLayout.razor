@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject AuthState AuthState
@inject NavigationManager Navigation
@using Blazor_Labb02.Helpers
@using Blazor_Labb02.Services

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            
            <p style="color: darkred">MainLayout.razor laddad!</p>

            <a href="" class="navbar-brand">Blazor_Labb02</a>
            
            @* @if (!string.IsNullOrEmpty(UserRole))
            {
                <span class="text-white ms-auto">Inloggad som: @UserMail <strong>@UserRole</strong></span>
            }
            else
            {
                <span class="text-white ms-auto">Ej inloggad</span>
            } *@

            @if (!string.IsNullOrWhiteSpace(AuthState.Role))
            {
                <span class="text-black ms-auto">Inloggad som: @AuthState.Email <strong>@AuthState.Role</strong></span>

                <button class="btn btn-outline-dark ms-3" @onclick="Logout">Logga ut</button>
            }
            else
            {
                <span class="text-black ms-auto">Ej inloggad</span>
            }


            




            @* <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a> *@

        </div>


        @* <p style="color:lime">
            Token: @(AuthState.Token?.Substring(0, 10) ?? "Ingen token")<br />
            Roll: @AuthState.Role<br />
            E-post: @AuthState.Email
        </p> *@

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    protected override void OnInitialized()
    {
        AuthState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateHasChanged;
    }



    // private string? UserRole;
    // private string? UserMail;

    // protected override async Task OnInitializedAsync()
    // {
    //     var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

    //     if (!string.IsNullOrWhiteSpace(token))
    //     {
    //         UserRole = JwtHelper.GetRoleFromToken(token);
    //         UserMail = JwtHelper.GetEmailFromToken(token);

    //         StateHasChanged();
    //     }
    //     else
    //     {
    //         UserMail = "Ej inloggad";
    //     }
    // }

    // protected override async Task OnInitializedAsync()
    // {
    //     var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

    //     if (!string.IsNullOrWhiteSpace(token))
    //     {
    //         AuthState.SetToken(token);
    //         StateHasChanged();
    //     }
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthState.OnChange += StateHasChanged;

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrWhiteSpace(token))
            {
                AuthState.SetToken(token);
                StateHasChanged();
            }
        }
    }


    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        AuthState.Clear();
        Navigation.NavigateTo("/login"); // eller "/" om du vill tillbaka till startsidan
    }
}
