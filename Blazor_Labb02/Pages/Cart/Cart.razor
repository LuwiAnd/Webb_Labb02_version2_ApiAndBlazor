@page "/cart"
@inject CartService CartService
@inject IJSRuntime JS


<h3>Din kundvagn</h3>

@if (items == null)
{
    <p>Laddar kundvagn...</p>
}
else if (!items.Any())
{
    <p>Kundvagnen är tom.</p>
}
else
{
    <table class="table">
        <thead>
            <tr><th>Produkt</th><th>Antal</th><th>Pris</th><th></th></tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Price * item.Quantity) kr</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => Remove(item.ProductID)">Ta bort</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4">
        <button class="btn btn-success me-2" @onclick="Checkout">Genomför beställning</button>
        <button class="btn btn-danger" @onclick="ClearCart">Töm kundvagn</button>
    </div>

}

@code {
    private List<CartItemResponse>? items;

    protected override async Task OnInitializedAsync()
    {
        items = await CartService.GetCart();
    }

    private async Task Remove(int productId)
    {
        await CartService.RemoveFromCart(productId);
        items = await CartService.GetCart(); // Uppdaterar listan efter borttagning av produkt.
    }



    private async Task Checkout()
    {
        try
        {
            await CartService.Checkout();
            await JS.InvokeVoidAsync("alert", "Beställningen har genomförts!");
            items = new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fel vid beställning: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Det gick inte att genomföra beställningen.");
        }
    }

    private async Task ClearCart()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Vill du verkligen tömma kundvagnen?");
        if (!confirmed) return;

        try
        {
            await CartService.ClearCart();
            items = new(); // töm listan lokalt
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fel vid tömning: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Det gick inte att tömma kundvagnen.");
        }
    }

}
