@page "/profile/{UserId:int?}"

@inject AuthState AuthState
@inject UserService UserService
@inject NavigationManager Navigation

@using Blazor_Labb02.BlazorModels.ResponseDto
@using Blazor_Labb02.BlazorModels.RequestDto


@if (UserId.HasValue)
{
    <h3>Redigera användare</h3>
}
else
{
    <h3>Min profil</h3>
}


@if (string.IsNullOrWhiteSpace(AuthState.Email))
{
    <div class="alert alert-danger">
        Du måste vara inloggad för att se denna sida.
    </div>
}
else if (user == null)
{
    <p>Laddar användaruppgifter...</p>
}
else
{
    <EditForm Model="@user" OnValidSubmit="@UpdateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Förnamn:</label>
            <InputText class="form-control" @bind-Value="user.FirstName" />
        </div>
        <div class="mb-3">
            <label>Efternamn:</label>
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>
        <div class="mb-3">
            <label>E-post:</label>
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <div class="mb-3">
            <label>Telefonnummer:</label>
            <InputText class="form-control" @bind-Value="user.Phone" />
        </div>
        <div class="mb-3">
            <label>Adress:</label>
            <InputText class="form-control" @bind-Value="user.Address" />
        </div>

        <div class="mb-3">
            <label>Roll:</label>
            @if (UserId.HasValue && AuthState.Role == "admin" && UserId != AuthState.UserId)
            {
                <InputSelect class="form-control" @bind-Value="user.Role">
                    <option value="user">user</option>
                    <option value="admin">admin</option>
                </InputSelect>
            }
            else
            {
                <InputText class="form-control" @bind-Value="user.Role" disabled />
            }
        </div>



        @if (UserId.HasValue && AuthState.Role == "admin")
        {
            <div class="mb-3">
                <label>Ny lösenord:</label>
                <InputText class="form-control" @bind-Value="newPassword" type="password" />
            </div>
        }


        <button class="btn btn-primary">Spara ändringar</button>
    </EditForm>
}


@code {
    [Parameter] public int? UserId { get; set; }
    private UserRequest? user;

    private string? newPassword;


    protected override async Task OnInitializedAsync()
    {
        if (UserId.HasValue)
        {
            var loadedUser = await UserService.GetById(UserId.Value);

            if (loadedUser != null)
            {
                user = new UserRequest
                {
                    Id = loadedUser.UserID,
                    FirstName = loadedUser.FirstName,
                    LastName = loadedUser.LastName,
                    Email = loadedUser.Email,
                    Phone = loadedUser.PhoneNumber,
                    Address = loadedUser.HomeAddress,
                    Role = loadedUser.Role
                };
            }
        }
        else if (!string.IsNullOrWhiteSpace(AuthState.Email))
        {
            var loadedUser = await UserService.GetByEmail(AuthState.Email);
            if (loadedUser != null)
            {
                user = new UserRequest
                {
                    Id = loadedUser.UserID,
                    FirstName = loadedUser.FirstName,
                    LastName = loadedUser.LastName,
                    Email = loadedUser.Email,
                    Phone = loadedUser.PhoneNumber,
                    Address = loadedUser.HomeAddress,
                    Role = loadedUser.Role
                };
            }
        }
    }


    private async Task UpdateUser()
    {
        if (user is not null)
        {

            if (!string.IsNullOrWhiteSpace(newPassword))
            {
                user.Password = newPassword;
            }

            if (UserId.HasValue)
            {
                // await UserService.UpdateUser(user.Id, user);
                await UserService.UpdateUser(user);
            }
            else
            {
                await UserService.UpdateMyProfile(user);
            }
            Navigation.NavigateTo("/");
        }
    }

}
